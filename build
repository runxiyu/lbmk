#!/usr/bin/env sh
# SPDX-License-Identifier: GPL-3.0-or-later
# Copyright (c) 2014-2015,2020-2024 Leah Rowe <leah@libreboot.org>
# Copyright (c) 2015 Patrick "P. J." McDermott <pj@pehjota.net>
# Copyright (c) 2015-2016 Klemens Nanni <contact@autoboot.org>
# Copyright (c) 2022 Caleb La Grange <thonkpeasant@protonmail.com>

set -u -e

if [ "./${0##*/}" != "${0}" ] || [ ! -f "build" ] || [ -L "build" ]; then
	printf "You must run this in the proper work directory.\n" 1>&2
	exit 1
fi

. "include/lib.sh"
. "include/vendor.sh"
. "include/mrc.sh"

eval `setvars "" vdir src_dirname srcdir _xm mode xp`
err="fail"

main()
{
	[ $# -lt 1 ] && $err "bad command"
	spath="script/$1"

	for g in "which git" "git config --global user.name" \
	    "git config --global user.email" "git_init"; do
		eval "$g 1>/dev/null 2>/dev/null || git_err \"$g\""
	done

	case "${1}" in
	version) printf "%s\nWebsite: %s\n" "$relname" "$projectsite" ;;
	release) shift 1; mkrelease $@ ;;
	inject) shift 1; vendor_inject $@ ;;
	download) shift 1; vendor_download $@ ;;
	*)
		[ -f "$spath" ] || $err "bad command"
		shift 1; "$spath" $@ || $err "excmd: $spath $@" ;;
	esac
	set -u -e # some commands disable them. turn them on!
}

git_init()
{
	[ -L ".git" ] && return 1
	[ -e ".git" ] && return 0
	eval `setvars "$(date -Rud @$versiondate)" cdate _nogit`

	git init || return 1
	git add -A . || return 1
	git commit -m "$projectname $version" --date "$cdate" \
	    --author="xbmk <xbmk@example.com>" || return 1
	git tag -a "$version" -m "$projectname $version" || return 1
}

mkrelease()
{
	export XBMK_RELEASE="y"

	vdir="release"
	while getopts d:m: option; do
		[ -z "$OPTARG" ] && $err "empty argument not allowed"
		case "$option" in
		d) vdir="$OPTARG" ;;
		m) mode="$OPTARG" ;;
		*) $err "invalid option '-$option'" ;;
		esac
	done

	vdir="$vdir/$version"
	src_dirname="${relname}_src"
	srcdir="$vdir/$src_dirname"

	[ -e "$vdir" ] && $err "already exists: \"$vdir\""
	mkdir -p "$vdir" || $err "mkvdir: !mkdir -p \"$vdir\""
	git clone . "$srcdir" || $err "mkdir: !gitclone \"$srcdir\""
	touch "$srcdir/lock" || $err "can't make lock file in $srcdir/"

	build_release

	printf "\n\nDONE! Check release files under %s\n" "$vdir"
}

build_release()
{
	_xm="build_release $vdir"
	(
	cd "$srcdir" || $err "$_xm: !cd \"$srcdir\""
	fetch_trees
	x_ mv src/docs docs
	) || $err "can't create release files"

	git log --graph --pretty=format:'%Cred%h%Creset %s %Creset' \
	    --abbrev-commit > "$srcdir/CHANGELOG" || $err "!gitlog $srcdir"
	rm -f "$srcdir/lock" || $err "can't remove lock file in $srcdir"

	(
	cd "${srcdir%/*}" || $err "$_xm: mktarball \"$srcdir\""
	mktarball "${srcdir##*/}" "${srcdir##*/}.tar.xz" || $err "$_xm: mksrc"
	) || $err "can't create src tarball"
	[ "$mode" = "src" ] && return 0

	touch "$srcdir/lock" || $err "can't make lock file in $srcdir/"

	(
	cd "$srcdir" || $err "$_xm: 2 !cd \"$srcdir\""
	./build roms all || $err "$_xm: roms-all"
	./build roms serprog rp2040 || $err "$_xm: rp2040"
	./build roms serprog stm32 || $err "$_xm: stm32"
	x_ mv bin ../roms
	) || $err "can't build rom images"

	rm -Rf "$srcdir" || $err "!rm -Rf $srcdir"
}

fetch_trees()
{
	for x in $(ls -1 config/git); do
		./update trees -f "$x" || $err "$_xm: fetch $x"
		singletree "$x" || x_ rm -Rf "src/$x/$x"
	done
	rmgit .
}

fail()
{
	tmp_cleanup || printf "WARNING: can't rm tmpfiles: %s\n" "$TMPDIR" 1>&2
	err_ "${1}"
}

tmp_cleanup()
{
	[ "$xbmk_parent" = "y" ] || return 0
	rm -Rf "$TMPDIR" || return 1
	rm -f lock || return 1
}

main $@
tmp_cleanup || err_ "can't rm TMPDIR upon non-zero exit: $TMPDIR"
