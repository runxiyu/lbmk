#!/usr/bin/env sh

#  helper script: generate release archive (ROM images)
#
#	Copyright (C) 2020,2021,2022,2023 Leah Rowe <info@minifree.org>
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

[ "x${DEBUG+set}" = 'xset' ] && set -v
set -u -e

. "include/err.sh"

projectname="$(cat projectname)"
version="version-unknown"
versiondate="version-date-unknown"
tree="default"
target=""
CONFIG_HAVE_MRC=""
CONFIG_HAVE_ME_BIN=""
CONFIG_KBC1126_FIRMWARE=""
CONFIG_INCLUDE_SMSC_SCH5545_EC_FW=""
ifdtool="cbutils/${tree}/ifdtool"
cbfstool="cbutils/${tree}/cbfstool"

main()
{
	printf "Building ROM image archives for version %s\n" "${version}"

	init_check

	for romdir in bin/*; do
		make_archive "${romdir}"
	done

	printf "\nROM archives available at release/%s/roms/\n\n" "${version}"
}

init_check()
{
	if [ -f version ]; then
		version="$(cat version)"
	[ -f versiondate ] && \
		versiondate="$(cat versiondate)"
	[ ! -d "bin/" ] && \
		err "init_check: no ROMs built yet (error)"
	[ -d "release/" ] || \
		mkdir -p release/ || \
		    err "init_check: !mkdir -p release/"
	[ -d "release/${version}/" ] || \
		mkdir -p "release/${version}/" || \
		    err "init_check: !mkdir -p release/${version}/"
	[ ! -d "release/${version}/roms/" ] || \
		rm -Rf "release/${version}/roms/" || \
		    err "init_check: !rm -Rf release/${version}/roms/"

	if [ ! -d "release/${version}/roms/" ]; then
		mkdir -p "release/${version}/roms/" || \
		    err "init_check: !mkdir -p release/${version}/roms/"
	fi
}

make_archive()
{
	romdir=${1}
	target="${romdir##*/}"

	echo ${target}
	[ -d "${romdir}/" ] || continue

	CONFIG_HAVE_MRC="y"
	CONFIG_HAVE_ME_BIN="y"
	CONFIG_KBC1126_FIRMWARE="y"
	CONFIG_INCLUDE_SMSC_SCH5545_EC_FW="y"
	grep "CONFIG_HAVE_ME_BIN=y" "resources/coreboot/${target}/config/"* || \
	    CONFIG_HAVE_ME_BIN="n"
	grep "CONFIG_HAVE_MRC=y" "resources/coreboot/${target}/config/"* || \
	    CONFIG_HAVE_MRC="n"
	grep "CONFIG_KBC1126_FIRMWARE=y" \
	    "resources/coreboot/${target}/config"/* || \
	    CONFIG_KBC1126_FIRMWARE="n"
	grep "CONFIG_INCLUDE_SMSC_SCH5545_EC_FW=y" \
	    "resources/coreboot/${target}/config"/* || \
	    CONFIG_INCLUDE_SMSC_SCH5545_EC_FW="n"

	# remove ME/MRC/EC firmware from ROM images
	if [ "${CONFIG_HAVE_ME_BIN}" = "y" ] || \
	    [ "${target}" = "e6400nvidia_4mb" ]; then
		strip_archive "${romdir}"
	fi

	printf "Generating release/%s/roms/%s-%s_%s.tar.xz\n" \
	    "${version}" "${projectname}" "${version}" "${target##*/}"
	printf "%s\n" "${version}" > "${romdir}/version" || \
	    err "make_archive: can't create ${romdir}/version"
	printf "%s\n" "${versiondate}" > "${romdir}/versiondate" || \
	    err "make_archive: can't create ${romdir}/versiondate"
	printf "%s\n" "${projectname}" > "${romdir}/projectname" || \
	    err "make_archive: can't create ${romdir}/projectname"

	f="release/${version}/roms/${projectname}-${version}_${target##*/}"
	tar -c "${romdir}/" | xz -9e > "${f}.tar.xz" || \
	    err "make_archive: can't create ${f}.tar.xz"

	if [ -d "${romdir}_tmp" ]; then
		rm -Rf "${romdir}" || err "make_archive: !rm -Rf ${romdir}"
		mv "${romdir}_tmp" "${romdir}" || \
		    err "make_archive: !mv \"${romdir}_tmp\" \"${romdir}\""
	fi
}

strip_archive()
{
	romdir=${1}

	[ -d coreboot/${tree} ] || \
		./fetch_trees coreboot ${tree} || \
		    err "strip_archive: coreboot/${tree}: can't fetch source"
	./build coreboot utils ${tree} || \
	    err "strip_archive: coreboot/${tree}: can't build utils"

	# dirty hack, to reduce disk io later
	# rather than using /tmp, which might not be tmpfs
	rm -Rf "${romdir}_tmp" || err "strip_archive: !rm -Rf ${romdir}_tmp"
	mkdir "${romdir}_tmp" || err "strip_archive: !mkdir ${romdir}_tmp"

	# Hash the rom before removing blobs
	rm -f "${romdir}/blobhashes" || \
	    err "strip_archive: !rm -f ${blobdir}/blobhashes"
	touch "${romdir}/blobhashes" || \
	    err "strip_archive: !touch ${blobdir}/blobhashes"

	(
	cd ${romdir} || err "strip_archive: !cd ${romdir}"
	sha1sum *.rom >> blobhashes || \
	    err "strip_archive: ${romdir}: !sha1sum *.rom >> blobhashes"
	)

	for romfile in "${romdir}"/*.rom; do
		strip_rom_image "${romfile}"
	done
}

strip_rom_image()
{
	romfile=${1}

	[ -f "${romfile}" ] || return 0

	if [ "${CONFIG_HAVE_ME_BIN}" = "y" ]; then
		${ifdtool} --nuke me "${romfile}" || \
		    err "strip_rom_images: ${romfile}: cannot nuke Intel ME"
		mv "${romfile}" "${romdir}_tmp" || \
		    err "strip_rom_images: !mv ${romfile} ${romdir}_tmp"
		mv "${romfile}.new" "${romfile}" || \
		    err "strip_rom_images: !mv ${romfile}.new ${romfile}"
	fi

	if [ "${CONFIG_HAVE_MRC}" = "y" ]; then
		${cbfstool} "${romfile}" remove -n mrc.bin || \
		    err "strip_rom_images: ${romfile}: cannot nuke mrc.bin"
		${cbfstool} "${romfile}" print || :
	fi

	if [ "${CONFIG_KBC1126_FIRMWARE}" = "y" ]; then
		${cbfstool} "${romfile}" remove -n ecfw1.bin || \
		    err "strip_rom_images: ${romfile}: can't nuke ecfw1.bin"
		${cbfstool} "${romfile}" remove -n ecfw2.bin || \
		    err "strip_rom_images: ${romfile}: can't nuke ecfw2.bin"
	fi

	[ "${CONFIG_INCLUDE_SMSC_SCH5545_EC_FW}" != "y" ] || \
		${cbfstool} "${romfile}" remove -n sch5545_ecfw.bin || \
		    err "strip_rom_images: ${romfile}: can't nuke sch5545ec fw"

	# TODO: replace this board-specific hack
	if [ "${target}" = "e6400nvidia_4mb" ]; then
		${cbfstool} "${romfile}" remove -n "pci10de,06eb.rom" || \
		    err "strip_rom_images: ${romfile}: can't nuke e6400 vga rom"
	fi
}

main $@
