#!/usr/bin/env sh

#  generic script for calling other scripts in lbmk
#
#	Copyright (C) 2014,2015,2020,2021,2023 Leah Rowe <info@minifree.org>
#	Copyright (C) 2015 Patrick "P. J." McDermott <pj@pehjota.net>
#	Copyright (C) 2015, 2016 Klemens Nanni <contact@autoboot.org>
#	Copyright (C) 2022, Caleb La Grange <thonkpeasant@protonmail.com>
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

[ "x${DEBUG+set}" = 'xset' ] && set -v
set -u -e

. "include/err.sh"

projectname="$(cat projectname)"
buildpath=""
mode=""
option=""

main()
{
	id -u 1>/dev/null 2>/dev/null || \
	    err "cannot ascertain user id"

	[ "${0##*/}" = "lbmk" ] && err "Don't run this script directly."
	[ $# -lt 1 ] && err "Too few arguments. Try: ${0} help"

	mode="${1}"
	if [ "$(id -u)" = "0" ] && [ "${mode}" != "dependencies" ]; then
		err "running lbmk as root as not permitted"
	fi

	buildpath="./resources/scripts/${0##*/}"

	./.gitcheck || err "/.gitcheck call from main, in /lbmk"
	[ "${mode}" = "help" ] && usage ${0} && exit 0
	[ $# -lt 2 ] && usage ${0} && exit 1

	if [ "${mode}" = "dependencies" ]; then
		install_dependencies $@ || err "Could not install dependencies"
		exit 0
	fi

	option="${2}"
	shift 2

	./resources/scripts/misc/versioncheck || \
	    err "Cannot check lbmk version"

	case "${option}" in
	list)
		printf "Options for mode '%s':\n\n" ${mode}
		listoptions "${mode}" ;;
	all)
		for option in $(listoptions "${mode}"); do
			"${buildpath}/${mode}/${option}" $@ || \
			    err "script fail: ${buildpath}/${mode}/${option} $@"
		done
		;;
	*)
		if [ ! -d "${buildpath}/${mode}" ]; then
			usage $0
			err "Invalid mode '${mode}'. Run: ${0} help"
		elif [ ! -f "${buildpath}/${mode}/${option}" ]; then
			usage $0
			printf "Invalid option for '%s'." ${mode}
			err "Run: ${0} ${mode} list'."
		fi
		"${buildpath}/${mode}/${option}" $@ || err "lbmk error"
	esac

	./.gitcheck clean || err "/.gitcheck clean call from main, in /lbmk"
}

install_dependencies()
{
	[ -f "resources/dependencies/${2}" ] || err "Unsupported target"

	aur_notice=""
	. "resources/dependencies/${2}"

	${pkg_add} ${pkglist} || \
	    err "install_dependencies: Error installing dependencies"
	[ "${aur_notice}" = "" ] || \
	    printf "You must install AUR packages: %s\n" "${aur_notice}" 1>&2
}

# Takes exactly one mode as parameter
listoptions()
{
	options="n"
	for option in "${buildpath}/${1}/"*; do
		[ -f "${option}" ] || continue
		printf '%s\n' ${option##*/}
		options="y"
	done
	[ "${options}" = "y" ] || \
	    err "listoptions: No scripts present in directory ${buildpath}/${1}"
}

usage()
{
	progname=${0}
	cat <<- EOF
	USAGE:	${progname} <MODE> <OPTION>

	possible values for 'mode':
	$(listmodes)

	Example:	${progname} module all
	Example:	${progname} module flashrom [static]
	Example:	${progname} roms withgrub
	Example:	${progname} clean all

	Refer to ${projectname} documentation for more info.
	EOF
}

listmodes()
{
	modes="n"
	for mode in "${buildpath}"/*; do
		[ -d "${mode}" ] || continue
		printf '%s\n' ${mode##*/}
		modes="y"
	done
	[ "${modes}" = "y" ] || \
	    err "listmodes: No directories present in directory ${buildpath}"
}

main $@
