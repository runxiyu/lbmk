#!/usr/bin/env sh

#  helper script: generate release archive (source code)
#
#	Copyright (C) 2020,2021,2023 Leah Rowe <info@minifree.org>
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

[ "x${DEBUG+set}" = 'xset' ] && set -v
set -u -e

projectname="$(cat projectname)"

modlist="coreboot flashrom grub memtest86plus seabios me_cleaner u-boot"
modlist="${modlist} bios_extract"

dirlist="resources util" # do not add blobs directory here. it's handled below

filelist="lbmk blobutil modify download build README.md COPYING Makefile update"
filelist="${filelist} version versiondate projectname .gitcheck gitclone"

version="version-unknown"
versiondate="version-date-unknown"
reldir=""
dirname=""
srcdir=""

printf "Building source code archive, version %s\n" "${version}"

main()
{
	[ -f version ] && \
		version="$(cat version)"
	[ -f versiondate ] && \
		versiondate="$(cat versiondate)"

	create_release_directory
	download_modules
	copy_files
	purge_files

	create_release_archive

	printf "Source code archive available at %s.tar.xz\n\n" "${srcdir}"
}

create_release_directory()
{
	reldir="release/${version}"
	dirname="${projectname}-${version}_src"
	srcdir="${reldir}/${dirname}"

	[ ! -d "release/" ] && mkdir -p release/
	[ ! -d "${reldir}/" ] && mkdir -p "${reldir}/"
	[ -d "${srcdir}/" ] && \
		rm -Rf "${srcdir}/"
	[ -f "${srcdir}.tar.xz" ] && \
		rm -f "${srcdir}.tar.xz/"

	mkdir -p "${srcdir}/"
	printf "%s" "${version}" > "${srcdir}"/version
}

download_modules()
{
	for modname in ${modlist}; do
		if [ ! -d "${modname}/" ]; then
			./download ${modname}
		fi
	done
}

copy_files()
{
	for dir in ${modlist} ${dirlist}; do
		cp -R "${dir}/" "${srcdir}/"
	done

	copy_blobs

	for i in ${filelist}; do
		if [ ! -f "${i}" ]; then
			rm -Rf "${srcdir}"
			err "file '${1}' does not exist"
		fi
		cp ${i} "${srcdir}/"
	done
}

copy_blobs()
{
	mkdir -p "${srcdir}"/blobs
	# do not copy intel ME etc, but do copy ifd/gbe files
	for i in t440p xx20 xx30 hp8200sff hp_ivybridge hp_sandybridge \
			hp8300usdt; do
		for j in ifd gbe 16_ifd; do
			if [ -f "blobs/${i}/${j}.bin" ]; then
				if [ ! -e "${srcdir}/blobs/${i}" ]; then
					mkdir -p "${srcdir}/blobs/${i}"
				fi
				cp blobs/${i}/${j}.bin "${srcdir}/blobs/${i}"
			fi
		done
	done
}

purge_files()
{
	(
	cd "${srcdir}/coreboot/" || err "cd1"
	for i in *; do
		[ ! -d "${i}" ] && \
			continue
		(
		cd "${i}/" || err "cd2"
		make distclean || err "make-distclean1"
		)
		make clean -BC default/util/kbc1126/ || err "make-clean1"
	done
	)

	(
	cd "${srcdir}/" || err "cd3"
	./build clean all || err "build-clean1"
	make clean -BC util/nvmutil || err "make-clean2"
	make clean -BC util/ich9utils || err "make-clean3"
	make clean -BC util/spkmodem_recv || err "make-clean4"
	make clean -BC util/e6400-flash-unlock || err "make-clean5"

	rm -Rf coreboot/coreboot/ || err "rm-rf1"
	rm -Rf .git .gitignore */.git* coreboot/*/.git* \
			coreboot/*/3rdparty/*/.git* || err "rm-rf2"
	rm -Rf coreboot/*/util/nvidia/cbootimage/.git* || err "rm-rf3"
	rm -Rf u-boot/u-boot/ u-boot/*/.git* || err "rm-rf4"
	)
}

create_release_archive()
{
	(
	cd "${reldir}/" || err "cd4"
	printf "%s\n" "${version}" > "${dirname}/version"
	printf "%s\n" "${versiondate}" > "${dirname}/versiondate"
	printf "%s\n" "${projectname}" > "${dirname}/projectname"
	tar -c "${dirname}/" | xz -9e >"${dirname}.tar.xz" || err "tar"
	rm -Rf "${dirname}/" || err "rm-rf5"
	)
}

err()
{
	printf "%s: %s\n" $0 $1
}

main $@
