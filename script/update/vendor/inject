#!/usr/bin/env sh
# SPDX-License-Identifier: GPL-3.0-only
# SPDX-FileCopyrightText: 2022 Caleb La Grange <thonkpeasant@protonmail.com>
# SPDX-FileCopyrightText: 2022 Ferass El Hafidi <vitali64pmemail@protonmail.com>
# SPDX-FileCopyrightText: 2023 Leah Rowe <leah@libreboot.org>

. "include/err.sh"
. "include/vendor.sh"
. "include/option.sh"

release_archive="n"

main()
{
	[ $# -lt 1 ] && err "No options specified."
	[ "${1}" = "listboards" ] && \
		listitems config/coreboot && exit 0

	archive="${1}"

	while getopts r:b:m: option
	do
		case "${option}" in
		r) rom=${OPTARG} ;;
		b) board=${OPTARG} ;;
		m) modifygbe=true
		   new_mac=${OPTARG} ;;
		esac
	done

	check_board
	build_dependencies
	inject_vendorfiles

	printf "Friendly reminder (this is *not* an error message):\n"
	printf "Please always ensure that the files were inserted correctly.\n"
}

check_board()
{
	if ! check_release "${archive}" ; then
		[ -f "${rom}" ] || \
			err "check_board: \"${rom}\" is not a valid path"
		[ -z "${rom+x}" ] && \
			err "check_board: no rom specified"
		[ ! -z ${board+x} ] || \
			board=$(detect_board "${rom}")
	else
		release=true
		releasearchive="${archive}"
		board=$(detect_board "${archive}")
	fi

	boarddir="${cbcfgsdir}/${board}"
	[ -d "${boarddir}" ] && return 0
	err "check_board: board ${board} not found"
}

check_release()
{
	[ -f "${archive}" ] || return 1
	[ "${archive##*.}" = "xz" ] || return 1
	printf "%s\n" "Release archive ${archive} detected"
}

# This function tries to determine the board from the filename of the rom.
# It will only succeed if the filename is not changed from the build/download
detect_board()
{
	path="${1}"
	filename=$(basename ${path})
	case ${filename} in
	grub_*)
		board=$(echo "${filename}" | cut -d '_' -f2-3) ;;
	seabios_withgrub_*)
		board=$(echo "${filename}" | cut -d '_' -f3-4) ;;
	*.tar.xz)
		_stripped_prefix=${filename#*_}
		board="${_stripped_prefix%.tar.xz}" ;;
	*)
		err "detect_board: could not detect board type"
	esac	
	[ -d "${boarddir}/" ] || \
		err "detect_board: dir, ${boarddir}, doesn't exist"
	printf "%s\n" "${board}"
}

build_dependencies()
{
	[ -d "${cbdir}" ] || x_ ./update project trees -f coreboot default
	x_ ./update project trees -b coreboot utils default
	x_ ./update vendor download ${board}
}

inject_vendorfiles()
{
	release_archive="n"
	[ "${release}" != "true" ] && x_ patch_rom "${rom}" && return 0
	printf "patching release file\n"
	release_archive="y"
	patch_release_roms
}

patch_release_roms()
{
	_tmpdir="tmp/romdir"
	x_ rm -Rf "${_tmpdir}"
	x_ mkdir -p "${_tmpdir}"
	x_ tar -xf "${releasearchive}" -C "${_tmpdir}"

	for x in "${_tmpdir}"/bin/*/*.rom ; do
		printf "patching rom: %s\n" "$x"
		x_ patch_rom "${x}"
	done
	for x in "${_tmpdir}"/bin/*/*_nomicrocode.rom ; do
		[ -f "${x}" ] || continue
		[ -f "${x%_nomicrocode.rom}.rom" ] || continue

		x_ cp "${x%_nomicrocode.rom}.rom" "${x}"
		x_ "${cbfstool}" "${x}" remove -n cpu_microcode_blob.bin
	done

	(
	x_ cd "${_tmpdir}/bin/"*

	# NOTE: For compatibility with older rom releases, defer to sha1
	sha512sum --status -c vendorhashes || \
	    sha1sum --status -c vendorhashes || \
	    sha512sum --status -c blobhashes || \
	    sha1sum --status -c blobhashes || \
	    err "patch_release_roms: ROMs did not match expected hashes"
	)

	if [ "${modifygbe}" = "true" ]; then
		for x in "${_tmpdir}"/bin/*/*.rom ; do
			modify_gbe "${x}"
		done
	fi

	[ -d bin/release ] || x_ mkdir -p bin/release
	x_ mv "${_tmpdir}"/bin/* bin/release/

	printf "Success! Your ROMs are in bin/release\n"

	x_ rm -Rf "${_tmpdir}"
}

patch_rom()
{
	rom="${1}"

	# we don't process no-microcode roms; these are
	# instead re-created at the end, after re-inserting
	# on roms with microcode, by copying and then removing,
	# so that the hashes will match (otherwise, cbfstool
	# may sometimes insert certain vendor files at the wrong offset)
	# (unless nomicrocode is the only config provided)
	[ "${rom}" != "${rom%_nomicrocode.rom}.rom" ] && \
	[ -f "${rom%_nomicrocode.rom}.rom" ] && \
	[ "${release_archive}" = "y" ] && return 0

	x_ check_defconfig "${boarddir}"

	set -- "${boarddir}/config/"*
	. "${1}" 2>/dev/null

	[ "$CONFIG_HAVE_MRC" = "y" ] && \
		inject_vendorfile_intel_mrc "${rom}"
	[ "${CONFIG_HAVE_ME_BIN}" = "y" ] && \
		inject_vendorfile_intel_me "${rom}"
	[ "${CONFIG_KBC1126_FIRMWARE}" = "y" ] && \
		inject_vendorfile_hp_kbc1126_ec "${rom}"
	[ "${CONFIG_VGA_BIOS_FILE}" != "" ] && \
	    [ "${CONFIG_VGA_BIOS_ID}" != "" ] && \
		inject_vendorfile_dell_e6400_vgarom_nvidia "${rom}"
	[ "${CONFIG_INCLUDE_SMSC_SCH5545_EC_FW}" = "y" ] && \
	    [ "${CONFIG_SMSC_SCH5545_EC_FW_FILE}" != "" ] && \
		inject_vendorfile_smsc_sch5545_ec "${rom}"
	[ "${modifygbe}" = "true" ] && ! [ "${release}" = "true" ] && \
		modify_gbe "${rom}"

	printf "ROM image successfully patched: %s\n" "${rom}"
}

inject_vendorfile_intel_mrc()
{
	rom="${1}"

	printf "adding mrc\n"

	# mrc.bin must be inserted at a specific offset

	# in cbfstool, -b values above 0x80000000 are interpreted as
	# top-aligned x86 memory locations. this is converted into an
	# absolute offset within the flash, and inserted accordingly
	# at that offset into the ROM image file

	# coreboot's own build system hardcodes the mrc.bin offset
	# because there is only one correct location in memory, but
	# it would be useful for us if it could be easily scanned
	# from Kconfig, with the option to change it where in practise
	# it is not changed

	# the hardcoded offset below is based upon reading of the coreboot
	# source code, and it is *always* correct for haswell platform.
	# TODO: this logic should be tweaked to handle more platforms

	x_ "${cbfstool}" "${rom}" add -f mrc/haswell/mrc.bin -n mrc.bin \
	    -t mrc -b 0xfffa0000
}

inject_vendorfile_intel_me()
{
	printf "adding intel me firmware\n"

	rom="${1}"
	[ -z "${CONFIG_ME_BIN_PATH}" ] && \
		err "inject_vendorfile_intel_me: CONFIG_ME_BIN_PATH not set"

	_me_location=${CONFIG_ME_BIN_PATH##*../}
	[ ! -f "${_me_location}" ] && \
		err "inject_vendorfile_intel_me: per CONFIG_ME_BIN_PATH: file missing"

	x_ "${ifdtool}" -i me:"${_me_location}" "${rom}" -O "${rom}"
}

inject_vendorfile_hp_kbc1126_ec()
{
	rom="${1}"

	_ec1_location="${CONFIG_KBC1126_FW1##*../}"
	_ec1_offset="${CONFIG_KBC1126_FW1_OFFSET}"
	_ec2_location="${CONFIG_KBC1126_FW2##*../}"
	_ec2_offset="${CONFIG_KBC1126_FW2_OFFSET}"

	printf "adding hp kbc1126 ec firmware\n"

	if [ "${_ec1_offset}" = "" ] || [ "${_ec1_offset}" = "" ]; then
		err "inject_vendorfile_hp_kbc1126_ec: ${board}: offset not declared"
	elif [ "${_ec1_location}" = "" ] || [ "${_ec2_location}" = "" ]; then
		err "inject_vendorfile_hp_kbc1126_ec: ${board}: EC path not declared"
	elif [ ! -f "${_ec1_location}" ] || [ ! -f "${_ec2_location}" ]; then
		err "inject_vendorfile_hp_kbc1126_ec: ${board}: ecfw not downloaded"
	fi

	x_ "${cbfstool}" "${rom}" add -f "${_ec1_location}" -n ecfw1.bin \
	    -b ${_ec1_offset} -t raw
	x_ "${cbfstool}" "${rom}" add -f "${_ec2_location}" -n ecfw2.bin \
	    -b ${_ec2_offset} -t raw
}

inject_vendorfile_dell_e6400_vgarom_nvidia()
{
	rom="${1}"

	_vga_location="${CONFIG_VGA_BIOS_FILE##*../}"
	_vga_dir="${_vga_location%/*}"
	_vga_filename="${_vga_location##*/}"

	printf "adding pci option rom\n"

	[ "${_vga_dir}" = "${pciromsdir}" ] || \
		err "inject_vendorfile_dell_e6400vga: invalid pcirom dir: ${_vga_dir}"
	[ -f "${_vga_location}" ] || \
		err "inject_vendorfile_dell_e6400vga: ${_vga_location} doesn't exist"

	x_ "${cbfstool}" "${rom}" add -f "${_vga_location}" \
	    -n "pci${CONFIG_VGA_BIOS_ID}.rom" -t optionrom
}

inject_vendorfile_smsc_sch5545_ec()
{
	rom="${1}"
	_sch5545ec_location="${CONFIG_SMSC_SCH5545_EC_FW_FILE##*../}"
	[ -f "${_sch5545ec_location}" ] || \
		err "inject_vendorfile_smsc_sch5545_ec: SCH5545 fw missing"

	x_ "${cbfstool}" "${rom}" add -f "${_sch5545ec_location}" \
	    -n sch5545_ecfw.bin -t raw
}

modify_gbe()
{
	printf "changing mac address in gbe to ${new_mac}\n"
	[ -z "${CONFIG_GBE_BIN_PATH}" ] && \
		err "modify_gbe: ${board}: CONFIG_GBE_BIN_PATH not set"

	rom="${1}"
	_gbe_location=${CONFIG_GBE_BIN_PATH##*../}
	[ -f "${_gbe_location}" ] || \
		err "modify_gbe: CONFIG_GBE_BIN_PATH points to missing file"
	[ -f "${nvmutil}" ] || \
		x_ make -C util/nvmutil

	_gbe_tmp=$(mktemp -t gbeXXXX.bin)
	x_ cp "${_gbe_location}" "${_gbe_tmp}"
	x_ "${nvmutil}" "${_gbe_tmp}" setmac "${new_mac}"
	x_ "${ifdtool}" -i GbE:"${_gbe_tmp}" "${rom}" -O "${rom}"

	x_ rm -f "${_gbe_tmp}"
}

usage()
{
	cat <<- EOF
	USAGE: ./update vendor inject -r [rom path] -b [boardname] -m [macaddress]
	Example: ./update vendor inject -r x230_12mb.rom -b x230_12mb

	Adding a macadress to the gbe is optional.
	If the [-m] parameter is left blank, the gbe will not be touched.

	Type './update vendor inject listboards' to get a list of valid boards
	EOF
}

main $@
