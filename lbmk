#!/usr/bin/env sh

#  generic script for calling other scripts in lbmk
#
#	Copyright (C) 2014,2015,2020,2021,2023 Leah Rowe <info@minifree.org>
#	Copyright (C) 2015 Patrick "P. J." McDermott <pj@pehjota.net>
#	Copyright (C) 2015, 2016 Klemens Nanni <contact@autoboot.org>
#	Copyright (C) 2022, Caleb La Grange <thonkpeasant@protonmail.com>
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

[ "x${DEBUG+set}" = 'xset' ] && set -v
set -u -e

. "include/err.sh"
. "include/export.sh"

read projectname < projectname
buildpath=""
mode=""
option=""

main()
{
	id -u 1>/dev/null 2>/dev/null || \
	    fail "cannot ascertain user id"

	[ "${0##*/}" = "lbmk" ] && fail "Don't run this script directly."
	[ $# -lt 1 ] && fail "Too few arguments. Try: ${0} help"

	mode="${1}"
	if [ "${mode}" = "dependencies" ]; then
		if [ $# -lt 2 ]; then
			printf "You must specify a distro, namely:\n" 1>&2
			printf "Look at files under config/dependencies/\n" \
			    1>&2
			printf "Example: ./build dependencies debian\n" 1>&2
			fail "target not specified"
		fi
		install_dependencies $@ || fail "Could not install dependencies"
		lbmk_exit 0
	fi
	if [ "$(id -u)" = "0" ]; then
		fail "running this command as root is not permitted"
	fi

	buildpath="./script/${0##*/}"

	[ "${mode}" = "help" ] && usage ${0} && exit 0
	[ "${mode}" = "list" ] && ./build command options "${buildpath}" && \
	    exit 0
	[ $# -lt 2 ] && usage ${0} && exit 1

	./checkgit || fail "Please read: https://libreboot.org/docs/build/"

	option="${2}"
	shift 2

	./checkversion || fail "Cannot check lbmk version"

	case "${option}" in
	list)
		./build command options "${buildpath}/${mode}" ;;
	all)
		for option in $(./build command options "${buildpath}/${mode}")
		do
			"${buildpath}/${mode}/${option}" $@ || \
			    fail "script fail: ${buildpath}/${mode}/${option} $@"
		done
		;;
	*)
		if [ ! -d "${buildpath}/${mode}" ]; then
			usage $0
			fail "Invalid mode '${mode}'. Run: ${0} help"
		elif [ ! -f "${buildpath}/${mode}/${option}" ]; then
			usage $0
			printf "Invalid option for '%s'." ${mode} 1>&2
			fail "Run: ${0} ${mode} list'."
		fi
		"${buildpath}/${mode}/${option}" $@ || fail "lbmk error"
	esac

	lbmk_exit 0
}

install_dependencies()
{
	[ -f "config/dependencies/${2}" ] || fail "Unsupported target"

	aur_notice=""
	. "config/dependencies/${2}"

	${pkg_add} ${pkglist} || \
	    fail "install_dependencies: Error installing dependencies"
	[ "${aur_notice}" = "" ] || \
	    printf "You must install AUR packages: %s\n" "${aur_notice}" 1>&2
}

usage()
{
	progname=${0}
	cat <<- EOF
	USAGE:	${progname} <MODE> <OPTION>

	possible values for 'mode':
	$(./build command options "${buildpath}")

	For each of the above modes, you may also do:
	${progname} <MODE> list

	Example: ./build grub list, which would yield:
	$(./build grub list)

	Refer to ${projectname} documentation for more info.
	EOF
}

lbmk_exit()
{
	tmp_cleanup || err "could not remove tmpdir on lbmk exit: ${tmpdir}"
	exit $1
}

fail()
{
	tmp_cleanup || printf "WARNING: could not remove tmpdir: %s\n" \
	    "${tmpdir}" 1>&2
	err "${1}"
}

tmp_cleanup()
{
	if [ "${tmpdir_was_set}" = "n" ]; then
		rm -Rf "${tmpdir}" || return 1
	fi
}

main $@
