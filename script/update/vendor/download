#!/usr/bin/env sh
# SPDX-License-Identifier: GPL-3.0-only
# SPDX-FileCopyrightText: 2022 Caleb La Grange <thonkpeasant@protonmail.com>
# SPDX-FileCopyrightText: 2022 Ferass El Hafidi <vitali64pmemail@protonmail.com>
# SPDX-FileCopyrightText: 2023 Leah Rowe <leah@libreboot.org>

. "include/err.sh"
. "include/vendor.sh"
. "include/mrc.sh"
. "include/option.sh"

export PATH="${PATH}:/sbin"

main()
{
	[ $# -gt 0 ] || err "No argument given"
	board="${1}"
	boarddir="${cbcfgsdir}/${board}"
	_b="${board%%_*mb}" # shorthand (avoid duplicating config per rom size)

	check_defconfig "${boarddir}" || exit 0
	detect_firmware && exit 0
	scan_config "${_b}" "config/vendor" "err"

	build_dependencies
	download_vendorfiles
}

detect_firmware()
{
	set -- "${boarddir}/config/"*
	. "${1}" 2>/dev/null

	for c in CONFIG_HAVE_MRC CONFIG_HAVE_ME_BIN CONFIG_KBC1126_FIRMWARE \
	    CONFIG_VGA_BIOS_FILE CONFIG_INCLUDE_SMSC_SCH5545_EC_FW; do
		eval "[ -z \"\${${c}}\" ] || return 1"
	done
	printf "Vendor files not needed for: %s\n" "${board}" 1>&2
}

build_dependencies()
{
	[ -d ${cbdir} ] || \
		x_ ./update project trees coreboot ${cbdir##*/}
	for d in uefitool biosutilities bios_extract me_cleaner; do
		[ -d "src/${d}" ] && continue
		x_ ./update project repo "${d}"
	done
	[ -f "${uefiextract}" ] || \
		x_ ./update project build -b uefitool
	[ -f "${kbc1126_ec_dump}" ] || \
		x_ make -C "${cbdir}/util/kbc1126"
	x_ ./build coreboot utils default
}

download_vendorfiles()
{
	[ -z "${CONFIG_HAVE_ME_BIN}" ] || \
		fetch "intel_me" "${DL_url}" "${DL_url_bkup}" "${DL_hash}" \
		    "${CONFIG_ME_BIN_PATH}"
	[ -z "${CONFIG_INCLUDE_SMSC_SCH5545_EC_FW}" ] || \
		fetch "sch5545ec" "${SCH5545EC_DL_url}" \
		    "${SCH5545EC_DL_url_bkup}" "${SCH5545EC_DL_hash}" \
		    "${CONFIG_SMSC_SCH5545_EC_FW_FILE}"
	[ -z "${CONFIG_KBC1126_FIRMWARE}" ] || \
		fetch "kbc1126ec" "${EC_url}" "${EC_url_bkup}" "${EC_hash}" \
		    "${CONFIG_KBC1126_FW1}"
	[ -z "${CONFIG_VGA_BIOS_FILE}" ] || \
		fetch "e6400vga" "${E6400_VGA_DL_url}" \
		    "${E6400_VGA_DL_url_bkup}" "${E6400_VGA_DL_hash}" \
		    "${CONFIG_VGA_BIOS_FILE}"
	[ -z "${CONFIG_HAVE_MRC}" ] && return 0
	fetch "mrc" "${MRC_url}" "${MRC_url_bkup}" "${MRC_hash}" \
	    "${CONFIG_MRC_FILE}"
}

extract_intel_me()
{
	_me="${PWD}/${_dest}" # must always be an absolute path
	cdir="${PWD}/${appdir}" # must always be an absolute path
	[ $# -gt 0 ] && _me="${1}"
	[ $# -gt 0 ] && cdir="${2}"
	[ -f "${_me}" ] && return 0

	sdir="$(mktemp -d)"
	mkdir -p "${sdir}" || err "extract_intel_me: !mkdir -p \"${sdir}\""
	(
	cd "${cdir}" || err "extract_intel_me: !cd \"${cdir}\""
	for i in *; do
		[ -f "${_me}" ] && break
		[ -L "${i}" ] && continue
		if [ -f "${i}" ]; then
			"${mecleaner}" -r -t -O "${sdir}/vendorfile" \
			    -M "${_me}" "${i}" && break
			"${mecleaner}" -r -t -O "${_me}" "${i}" && break
			"${me7updateparser}" -O "${_me}" "${i}" && break
			_7ztest="${_7ztest}a"
			extract_archive "${i}" "${_7ztest}" || continue
			extract_intel_me "${_me}" "${cdir}/${_7ztest}"
		elif [ -d "$i" ]; then
			extract_intel_me "${_me}" "${cdir}/${i}"
		else
			continue
		fi
		cdir="${1}"
		cd "${cdir}"
	done
	)
	rm -Rf "${sdir}" || err "extract_intel_me: !rm -Rf ${sdir}"
}

extract_kbc1126ec()
{
	(
	x_ cd "${appdir}/"
	mv Rompaq/68*.BIN ec.bin || :
	if [ ! -f ec.bin ]; then
		unar -D ROM.CAB Rom.bin || unar -D Rom.CAB Rom.bin || \
		    x_ unar -D 68*.CAB Rom.bin
		x_ mv Rom.bin ec.bin
	fi
	[ -f ec.bin ] || err "extract_kbc1126_ec ${board}: can't extract"
	"${kbc1126_ec_dump}" ec.bin || \
	    err "extract_kbc1126_ec ${board}: can't extract ecfw1/2.bin"
	)
	ec_ex="y"
	for i in 1 2; do
		[ -f "${appdir}/ec.bin.fw${i}" ] || ec_ex="n"
	done
	[ "${ec_ex}" = "y" ] || \
	    err "extract_kbc1126_ec ${board}: didn't extract ecfw1/2.bin"
	x_ cp "${appdir}/"ec.bin.fw* "${_dest%/*}/"
}

extract_e6400vga()
{
	[ "${E6400_VGA_offset}" = "" ] && \
		err "extract_e6400vga: E6400 VGA offset not defined"
	[ "${E6400_VGA_romname}" = "" ] && \
		err "extract_e6400vga: E6400 VGA ROM name not defined"
	tail -c +${E6400_VGA_offset} "${_dl}" | \
	    gunzip >"${appdir}/bios.bin" || :
	(
	x_ cd "${appdir}"
	[ -f "bios.bin" ] || err "extract_e6400vga: can't extract bios.bin"
	"${e6400_unpack}" bios.bin || printf "TODO: fix dell extract util\n"
	[ -f "${E6400_VGA_romname}" ] || \
		err "extract_e6400vga: can't extract vga rom from bios.bin"
	)
	x_ cp "${appdir}/${E6400_VGA_romname}" "${_dest}"
}

extract_sch5545ec()
{
	# full system ROM (UEFI), to extract with UEFIExtract:
	_bios="${_dl}_extracted/Firmware"
	_bios="${_bios}/1 ${dlsum} -- 1 System BIOS vA.28.bin"
	# this is the SCH5545 firmware, inside of the extracted UEFI ROM:
	_sch5545ec_fw="${_bios}.dump/4 7A9354D9-0468-444A-81CE-0BF617D890DF"
	_sch5545ec_fw="${_sch5545ec_fw}/54 D386BEB8-4B54-4E69-94F5-06091F67E0D3"
	_sch5545ec_fw="${_sch5545ec_fw}/0 Raw section/body.bin" # <-- this!

	# this makes the file defined by _sch5545ec_fw available to copy
	"${uefiextract}" "${_bios}" || \
	    err "extract_sch5545ec: cannot extract from uefi image"
	cp "${_sch5545ec_fw}" "${_dest}" || \
	    err "extract_sch5545ec: cannot copy sch5545ec firmware file"
}

main $@
