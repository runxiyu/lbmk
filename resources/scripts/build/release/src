#!/usr/bin/env sh

#  helper script: generate release archive (source code)
#
#	Copyright (C) 2020,2021,2023 Leah Rowe <info@minifree.org>
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

[ "x${DEBUG+set}" = 'xset' ] && set -v
set -u -e

. "include/err.sh"

projectname="$(cat projectname)"

trees_fetch_list="coreboot u-boot seabios"
simple_fetch_list="flashrom grub memtest86plus me_cleaner uefitool"
simple_fetch_list="${simple_fetch_list} bios_extract biosutilities"

dirlist="resources util" # do not add blobs directory here. it's handled below

filelist="lbmk modify build README.md COPYING Makefile update version"
filelist="${filelist} versiondate projectname .gitcheck fetch fetch_trees"

version="version-unknown"
versiondate="version-date-unknown"
reldir=""
dirname=""
srcdir=""

printf "Building source code archive, version %s\n" "${version}"

main()
{
	[ -f version ] && \
		version="$(cat version)"
	[ -f versiondate ] && \
		versiondate="$(cat versiondate)"

	create_release_directory
	download_modules
	copy_files
	purge_files

	create_release_archive

	printf "Source code archive available at %s.tar.xz\n\n" "${srcdir}"
}

create_release_directory()
{
	reldir="release/${version}"
	dirname="${projectname}-${version}_src"
	srcdir="${reldir}/${dirname}"

	[ -d "release/" ] || mkdir -p release/ || \
	    err "create_release_directory: !mkdir -p release/"
	[ -d "${reldir}/" ] || mkdir -p "${reldir}/" || \
	    err "create_release_directory: !mkdir -p ${reldir}/"
	[ ! -d "${srcdir}/" ] || rm -Rf "${srcdir}/" || \
	    err "create_release_directory: !rm -Rf ${srcdir}/"
	[ ! -f "${srcdir}.tar.xz" ] || \
		rm -f "${srcdir}.tar.xz/" || \
		    err "create_release_directory: !rm -f ${srcdir}.tar.xz/"

	mkdir -p "${srcdir}/" || \
	    err "create_release_directory: !mkdir -p ${srcdir}/"
	printf "%s" "${version}" > "${srcdir}"/version || \
	    err "create_release_directory: ${srcdir}/version: can't create file"
}

download_modules()
{
	for modname in ${trees_fetch_list}; do
		[ -d "${modname}" ] || ./fetch_trees ${modname} || \
		    err "download_modules: couldn't download ${modname} trees"
	done
	for modname in ${simple_fetch_list}; do
		[ -d "${modname}/" ] || ./fetch ${modname} || \
		    err "download_modules: couldn't download ${modname} repo"
	done
}

copy_files()
{
	for dir in ${simple_fetch_list} ${dirlist}; do
		cp -R "${dir}/" "${srcdir}/" || \
		    err "copy_files: !cp -R ${dir}/ ${srcdir}/"
	done

	copy_blobs

	for i in ${filelist}; do
		if [ ! -f "${i}" ]; then
			rm -Rf "${srcdir}" || \
			    err "copy_files: !rm -Rf ${srcdir}"
			err "copy_files: file '${1}' does not exist"
		fi
		cp "${i}" "${srcdir}/" || \
		    err "copy_files: !cp ${i} ${srcdir}/"
	done
}

copy_blobs()
{
	mkdir -p "${srcdir}"/blobs || \
	    err "copy_blobs: !mkdir -p ${srcdir}/blobs"
	# do not copy intel ME etc, but do copy ifd/gbe files
	for i in t440p xx20 xx30 hp8200sff hp_ivybridge hp_sandybridge \
	    hp8300usdt t1650; do
		for j in ifd gbe 4_ifd 8_ifd 12_ifd 16_ifd; do
			[ -f "blobs/${i}/${j}.bin" ] || continue
			[ -e "${srcdir}/blobs/${i}" ] || \
				mkdir -p "${srcdir}/blobs/${i}" || \
				    err "copy_blobs: ! -d ${srcdir}/blobs/${i}"
			cp "blobs/${i}/${j}.bin" "${srcdir}/blobs/${i}" || \
			    err "copy_blobs: ! -f ${srcdir}/blobs/${i}"
		done
	done
}

purge_files()
{
	(
	cd "${srcdir}/" || \
	    err "purge_files 3: !cd ${srcdir}/"

	for p in coreboot/*; do
		[ -d "${p}" ] || continue
		./build src for -c "${p}" || \
		    err "purge_files 1: ${p}: !make distclean"
	done

	./build src for -c coreboot/default/util/kbc1126 || \
	    err "purge_files 1: default/util/kbc1126: ! make clean"
	./build clean all || \
	    err "purge_files 1: ! ./build clean all"

	for p in bios_extract flashrom grub ich9utils uefitool; do
		./build src for -c "${p}" || \
		    err "purge_files: !./build src for -c ${p}"
	done
	for p in 32 64; do
		./build src for -c "memtest86plus/build${p}" || \
		    err "purge_files: cannot clean memtest86+ build${p}"
	done
	for p in "nvmutil" "ich9utils" "spkmodem_recv" "e6400-flash-unlock"; do
		make clean -C "util/${p}" || \
		
		    err "purge_files 2: !make clean -C ${util}/p"
	done
	for p in ${trees_fetch_list}; do
		rm -Rf "${p}/${p}" "${p}"/*/.git* || \
		    err "purge_files 1: cannot clean ${p} project files"
	done
	rm -Rf .git .gitignore */.git* coreboot/*/3rdparty/*/.git* \
	    coreboot/*/util/nvidia/cbootimage/.git* || \
	    err "purge_files rm-rf2: can't purge .git files/directories"
	)
}

create_release_archive()
{
	(
	cd "${reldir}/" || \
	    err "create_release_archive 4: !cd ${reldir}/"
	printf "%s\n" "${version}" > "${dirname}/version" || \
	    err "create_release_archive: can't create ${dirname}/version"
	printf "%s\n" "${versiondate}" > "${dirname}/versiondate" || \
	    err "create_release_archive: can't create ${dirname}/versiondate"
	printf "%s\n" "${projectname}" > "${dirname}/projectname" || \
	    err "create_release_archive: can't create ${dirname}/projectname"
	tar -c "${dirname}/" | xz -9e >"${dirname}.tar.xz" || \
	    err "create_release_archive: can't create ${dirname}.tar.xz"
	rm -Rf "${dirname}/" || \
	    err "create_release_archive 5: !rm -Rf ${dirname}/"
	)
}

main $@
